/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsProofStep {
  /** The sibling’s hash (Uint8Array) in raw bytes */
  sibling: Uint8Array
  /** Whether the sibling is on the left side */
  isLeft: boolean
}
/**
 * Safe initializer for the Rust side, hooking a panic logger.
 * We only call `INIT.call_once(...)` to ensure it’s done once.
 */
export declare function safeInitRust(): void
export type MerkleProofJs = MerkleProof
/** JavaScript-facing MerkleProof wrapper. */
export declare class MerkleProof {
  /**
   * Create from an array of `[Uint8Array, bool]` pairs if you like,
   * but for simplicity we'll do a single constructor here that
   * expects you to supply the pairs in a structured way, or
   * you might rely on MerkleTreeJs::get_proof below to create it.
   */
  constructor(steps: Array<JsProofStep>)
  /** Return true or false for a given root and leaf-hash. */
  verify(root: Uint8Array, leaf: Uint8Array): boolean
  /** Like verify, but we first do double-hash of `data` to get the leaf-hash. */
  verifyData(root: Uint8Array, data: Uint8Array): boolean
  /** Return the computed Merkle root when starting from `leaf_hash`. */
  root(leafHash: Uint8Array): Uint8Array
  rootHex(leafHash: Uint8Array): string
  /** Return all sibling hashes in the proof (direction flags omitted). */
  proofHashes(): Array<Uint8Array>
  proofHashesHex(): Array<string>
}
export type MerkleTreeJs = MerkleTree
export declare class MerkleTree {
  /** Hash a piece of data using the library's leaf-hash function (double SHA-256). */
  static hash(data: Uint8Array): Uint8Array
  /** Build a Merkle tree from raw leaves data. */
  constructor(leaves: Array<Uint8Array>)
  /** Returns the underlying tree's leaf-level (hashed) data. */
  hashes(): Array<Uint8Array>
  /** Return the Merkle root as bytes. */
  root(): Uint8Array
  /** Return the Merkle root in hex format, 0x-prefixed. */
  rootHex(): string
  /** Create a proof for a specific leaf index. */
  getProof(leafIndex: number): MerkleProof
  /** Return the index of `data` (double-hashed) in the tree, or error if not found. */
  getIndexData(data: Uint8Array): number
  /** Return the index of a hashed leaf in the tree, or error if not found. */
  getIndexHash(hash: Uint8Array): number
}
