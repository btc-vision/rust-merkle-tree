/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function safeInitRust(): void
export type MerkleTreeOptionsJs = MerkleTreeOptions
export declare class MerkleTreeOptions {
  sortLeaves: boolean
}
export type MerkleProofJs = MerkleProof
export declare class MerkleProof {
  constructor(proofHashes: Array<Uint8Array>, pos: number, size: number, sort: boolean)
  static newProof(proofHashes: Array<Uint8Array>, treeIndex: number, sort: boolean): MerkleProof
  verify(root: Uint8Array, hash: Uint8Array): boolean
  verifyData(root: Uint8Array, data: Uint8Array): boolean
  root(hash: Uint8Array): Uint8Array
  rootHex(hash: Uint8Array): string
  proofHashes(): Array<Uint8Array>
  proofHashesHex(): Array<string>
}
export type MerkleTreeJs = MerkleTree
export declare class MerkleTree {
  static hash(data: Uint8Array): Uint8Array
  constructor(leaves: Array<Uint8Array>, sortLeaves?: boolean | undefined | null)
  hashes(): Array<Uint8Array>
  root(): Uint8Array
  rootHex(): string
  /**
  * Create proof from leaves indices
  */
  getProof(leafIndex: number): MerkleProof
  getIndexData(data: Uint8Array): number
  getIndexHash(hash: Uint8Array): number
  getProofIndexByData(data: Uint8Array): number
  getProofIndexByHash(hash: Uint8Array): number
}
